generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model applications {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String?            @db.Uuid
  position_id      String?            @db.Uuid
  current_round    Int?               @default(1)
  rejected_round   Int? 
  note             String?
  source_channel   String?            @db.VarChar(50)
  applied_date     DateTime?          @default(now()) @db.Timestamptz(6)
  created_at       DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?          @default(now()) @db.Timestamptz(6)

  tags             applications_tags[]
  positions        positions?         @relation(fields: [position_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users            users?             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  application_rounds application_rounds[]
   notes           application_notes[]
  timeline        application_timeline[]
  status_id       String?             @db.Uuid
  status          application_status? @relation(fields: [status_id], references: [id]) 
}

model tags {
  id             String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String              @unique @db.VarChar(50)
  created_at     DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?           @default(now()) @db.Timestamptz(6)

  applications   applications_tags[]
}

model applications_tags {
  application_id String              @db.Uuid
  tag_id         String              @db.Uuid

  applications   applications        @relation(fields: [application_id], references: [id], onDelete: Cascade)
  tags          tags                @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@id([application_id, tag_id])
}

model companies {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String      @db.VarChar(100)
  industry_id  String?     @db.Uuid
  location     String?     @db.VarChar(100)
  created_at   DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?   @default(now()) @db.Timestamptz(6)
  website      String?     @db.VarChar(100)
  logo_url     String?     @db.Text
  logo_key     String?     @db.VarChar(100)

  // Relations
  positions    positions[]
  industry     industry?   @relation(fields: [industry_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  

  @@index([industry_id])
}

model industry {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String      @db.VarChar(100)
  created_at DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at DateTime?   @default(now()) @db.Timestamptz(6)

  // Reverse relation
  companies  companies[]
}


model application_rounds {   
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  application_id String?       @db.Uuid
  seq_no         Int            // âœ¨ changed from round_number to seq_no
  title          String         // new field for round title (eg. "Phone Screen", "Offer")
  isFinish         Boolean         
  feedback       String?
  note           String?
  created_at     DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?      @default(now()) @db.Timestamptz(6)

  applications   applications?  @relation(fields: [application_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model positions {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id   String?        @db.Uuid
  title        String         @db.VarChar(100)
  description  String?
  created_at   DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?      @default(now()) @db.Timestamptz(6)
  applications applications[]
  companies    companies?     @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  full_name    String         @db.VarChar(100)
  email        String         @unique @db.VarChar(100)
  password     String?        @db.VarChar(255)
  google_id    String?        @db.VarChar(255)
  created_at   DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?      @default(now()) @db.Timestamptz(6)
  applications applications[]
}




model application_notes {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  application_id String        @db.Uuid
  content        String
  created_at     DateTime?     @default(now()) @db.Timestamptz(6)

  applications    applications  @relation(fields: [application_id], references: [id], onDelete: Cascade)
}

model application_status {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String        @unique
  created_at     DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?     @default(now()) @db.Timestamptz(6)

  applications   applications[]
  timeline       application_timeline[]
}

model application_timeline {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  application_id String        @db.Uuid
  type           String
  title          String
  description    String?
  date           DateTime      @default(now()) @db.Timestamptz(6)
  status_id      String?       @db.Uuid

  application    applications  @relation(fields: [application_id], references: [id], onDelete: Cascade)
  status         application_status? @relation(fields: [status_id], references: [id])
}
